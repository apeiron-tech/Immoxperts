package com.apeiron.immoxperts.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AdresseAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdresseAllPropertiesEquals(Adresse expected, Adresse actual) {
        assertAdresseAutoGeneratedPropertiesEquals(expected, actual);
        assertAdresseAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdresseAllUpdatablePropertiesEquals(Adresse expected, Adresse actual) {
        assertAdresseUpdatableFieldsEquals(expected, actual);
        assertAdresseUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdresseAutoGeneratedPropertiesEquals(Adresse expected, Adresse actual) {
        assertThat(actual)
            .as("Verify Adresse auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdresseUpdatableFieldsEquals(Adresse expected, Adresse actual) {
        assertThat(actual)
            .as("Verify Adresse relevant properties")
            .satisfies(a -> assertThat(a.getIdadresse()).as("check idadresse").isEqualTo(expected.getIdadresse()))
            .satisfies(a -> assertThat(a.getNovoie()).as("check novoie").isEqualTo(expected.getNovoie()))
            .satisfies(a -> assertThat(a.getBtq()).as("check btq").isEqualTo(expected.getBtq()))
            .satisfies(a -> assertThat(a.getTypvoie()).as("check typvoie").isEqualTo(expected.getTypvoie()))
            .satisfies(a -> assertThat(a.getCodvoie()).as("check codvoie").isEqualTo(expected.getCodvoie()))
            .satisfies(a -> assertThat(a.getVoie()).as("check voie").isEqualTo(expected.getVoie()))
            .satisfies(a -> assertThat(a.getCodepostal()).as("check codepostal").isEqualTo(expected.getCodepostal()))
            .satisfies(a -> assertThat(a.getCommune()).as("check commune").isEqualTo(expected.getCommune()))
            .satisfies(a -> assertThat(a.getCoddep()).as("check coddep").isEqualTo(expected.getCoddep()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdresseUpdatableRelationshipsEquals(Adresse expected, Adresse actual) {
        // empty method
    }
}
