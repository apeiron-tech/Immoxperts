package com.apeiron.immoxperts.domain;

import static com.apeiron.immoxperts.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class MutationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMutationAllPropertiesEquals(Mutation expected, Mutation actual) {
        assertMutationAutoGeneratedPropertiesEquals(expected, actual);
        assertMutationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMutationAllUpdatablePropertiesEquals(Mutation expected, Mutation actual) {
        assertMutationUpdatableFieldsEquals(expected, actual);
        assertMutationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMutationAutoGeneratedPropertiesEquals(Mutation expected, Mutation actual) {
        assertThat(actual)
            .as("Verify Mutation auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMutationUpdatableFieldsEquals(Mutation expected, Mutation actual) {
        assertThat(actual)
            .as("Verify Mutation relevant properties")
            .satisfies(a -> assertThat(a.getIdmutation()).as("check idmutation").isEqualTo(expected.getIdmutation()))
            .satisfies(a -> assertThat(a.getDatemut()).as("check datemut").isEqualTo(expected.getDatemut()))
            .satisfies(a ->
                assertThat(a.getValeurfonc())
                    .as("check valeurfonc")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getValeurfonc())
            )
            .satisfies(a -> assertThat(a.getIdnatmut()).as("check idnatmut").isEqualTo(expected.getIdnatmut()))
            .satisfies(a -> assertThat(a.getCoddep()).as("check coddep").isEqualTo(expected.getCoddep()))
            .satisfies(a -> assertThat(a.getVefa()).as("check vefa").isEqualTo(expected.getVefa()))
            .satisfies(a -> assertThat(a.getSterr()).as("check sterr").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getSterr()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMutationUpdatableRelationshipsEquals(Mutation expected, Mutation actual) {
        // empty method
    }
}
