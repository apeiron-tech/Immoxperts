package com.apeiron.immoxperts.domain;

import static com.apeiron.immoxperts.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class LocalAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocalAllPropertiesEquals(Local expected, Local actual) {
        assertLocalAutoGeneratedPropertiesEquals(expected, actual);
        assertLocalAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocalAllUpdatablePropertiesEquals(Local expected, Local actual) {
        assertLocalUpdatableFieldsEquals(expected, actual);
        assertLocalUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocalAutoGeneratedPropertiesEquals(Local expected, Local actual) {
        assertThat(actual)
            .as("Verify Local auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocalUpdatableFieldsEquals(Local expected, Local actual) {
        assertThat(actual)
            .as("Verify Local relevant properties")
            .satisfies(a -> assertThat(a.getIddispoloc()).as("check iddispoloc").isEqualTo(expected.getIddispoloc()))
            .satisfies(a -> assertThat(a.getIdmutation()).as("check idmutation").isEqualTo(expected.getIdmutation()))
            .satisfies(a -> assertThat(a.getSbati()).as("check sbati").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getSbati()))
            .satisfies(a -> assertThat(a.getLibtyploc()).as("check libtyploc").isEqualTo(expected.getLibtyploc()))
            .satisfies(a -> assertThat(a.getNbpprinc()).as("check nbpprinc").isEqualTo(expected.getNbpprinc()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocalUpdatableRelationshipsEquals(Local expected, Local actual) {
        // empty method
    }
}
